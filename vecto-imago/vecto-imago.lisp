(defpackage #:vecto-imago
  (:use #:cl)
  (:local-nicknames (#:v #:vecto) (#:i #:imago) (#:z #:zpng)))

(in-package #:vecto-imago)

(declaim (inline blend-alpha))
(defun blend-alpha (src-a dest-a)
  (declare (optimize speed))
  (declare (type (unsigned-byte 8) src-a dest-a))
  (let* ((src-a (* 1f0 1/255 src-a))
         (dest-a (* 1f0 1/255 dest-a))
         (result (+ src-a (* dest-a (- 1f0 src-a)))))
    (round (* result 255f0))))

(declaim (inline blend))
(defun blend (ca cb aa ab ar)
  (declare (optimize speed))
  (declare (type (unsigned-byte 8) ca cb aa ab ar))
  (cond ((= 0 aa) cb)
        ((= 0 ab) ca)
        (t (let* ((aa (* 1f0 1/255 aa))
                  (ab (* 1f0 1/255 ab))
                  (ar (* 1f0 1/255 ar)))
             (let* ((left (* ca aa))
                    (right (* cb ab (- 1f0 aa)))
                    (result (/ (+ left right) ar)))
               (declare (type (single-float 0f0 255f0) left right result))
               (round result))))))

(deftype png-image-dimension () '(unsigned-byte 31))

(defmethod v:compose ((layer imago:rgb-image) x-offset y-offset)
  (declare (optimize speed))
  (declare (type (signed-byte 32) x-offset y-offset))
  (let* ((src (imago:image-pixels layer))
         (zpng (v:zpng-object))
         (dest (zpng:image-data zpng)))
    (declare (type (simple-array imago:rgb-pixel (* *)) src))
    (declare (type (simple-array (unsigned-byte 8) (*)) dest))
    (destructuring-bind (src-height src-width) (array-dimensions src)
      (declare (type png-image-dimension src-height src-width))
      (let* ((dest-height (z:height zpng))
             (dest-width (z:width zpng))
             ;; TODO: stop being ugly here, write a reader function in vecto
             ;; which returns the transform matrix
             ;; and then export accessor functions for it
             (matrix (v::transform-matrix v::*graphics-state*))
             (matrix-x-offset (ceiling
                               (the (single-float 0f0 #.(* (ash 1 31) 1f0))
                                    (v::transform-matrix-x-offset matrix))))
             (matrix-y-offset (ceiling
                               (the (single-float 0f0 #.(* (ash 1 31) 1f0))
                                    (v::transform-matrix-y-offset matrix))))
             (x-offset (+ matrix-x-offset x-offset))
             (y-offset (- matrix-y-offset y-offset src-height)))
        (declare (type png-image-dimension dest-height dest-width))
        (dotimes (src-y src-height)
          (dotimes (src-x src-width)
            (let ((dest-y (+ src-y y-offset))
                  (dest-x (+ src-x x-offset)))
              (declare (type (signed-byte 32) dest-x dest-x))
              (when (and (<= 0 dest-y (1- dest-height))
                         (<= 0 dest-x (1- dest-width)))
                (let* ((src-color (aref src src-y src-x))
                       (src-a (i:color-alpha src-color))
                       (src-r (i:color-red src-color))
                       (src-g (i:color-green src-color))
                       (src-b (i:color-blue src-color))
                       (dest-y-offset (* dest-y dest-width))
                       (dest-xy-offset (+ dest-y-offset dest-x))
                       (dest-offset (* (the (unsigned-byte 8)
                                            (z:samples-per-pixel zpng))
                                       dest-xy-offset))
                       (dest-a (aref dest (+ dest-offset 3)))
                       (dest-b (aref dest (+ dest-offset 2)))
                       (dest-g (aref dest (+ dest-offset 1)))
                       (dest-r (aref dest (+ dest-offset 0))))
                  (declare (type png-image-dimension
                                 dest-y-offset dest-offset))
                  (unless (= src-a 0)
                    (let* ((a (blend-alpha src-a dest-a))
                           (r (blend src-r dest-r src-a dest-a a))
                           (g (blend src-g dest-g src-a dest-a a))
                           (b (blend src-b dest-b src-a dest-a a)))
                      (setf (aref dest (+ dest-offset 3)) a
                            (aref dest (+ dest-offset 2)) b
                            (aref dest (+ dest-offset 1)) g
                            (aref dest (+ dest-offset 0)) r))))))))))))
